{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","username","email","colors","className","length","src","alt","CardList","robots","undefined","map","robot","key","console","log","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","Component","App","onSearchChange","event","setState","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"+MAkBeA,G,MAfF,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,GAAIC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAC5BC,EAAS,CAAC,gBAAiB,gBAAiB,iBAAkB,kBAAmB,iBACjF,eAAgB,eAAgB,eAAgB,gBAAiB,kBACrE,OACI,yBAAKC,UAAS,aAAQD,EAAOJ,EAAKI,EAAOE,QAA3B,uCACV,yBAAKC,IAAG,+BAA0BP,EAA1B,YAAwCQ,IAAI,WACpD,6BACI,4BAAKP,EAAL,KACA,+BAAKE,EAAL,KACA,+BAAKD,EAAL,SCMDO,EAfE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,kCACgBC,IAAXD,EAAuBA,EAAOE,KAAI,SAAAC,GAAK,OACpC,kBAAC,EAAD,CACIC,IAAKD,EAAMb,GACXA,GAAIa,EAAMb,GACVC,KAAMY,EAAMZ,KACZE,MAAOU,EAAMV,MACbD,SAAUW,EAAMX,cACpBa,QAAQC,IAAI,WCEbC,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OACI,yBAAKd,UAAU,UAAf,UACU,2BACPe,KAAK,SACLC,YAAY,gBACZhB,UAAU,kCACViB,SAAUH,MCENI,EATA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,WCcJC,E,kDAhBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAOC,GACrBC,KAAKJ,MAAM,CAAEC,UAAU,M,+BAIvB,OAAOG,KAAKJ,MAAMC,SAAW,6DAAyCG,KAAKX,MAAMK,a,GAb7DO,aC2CbC,E,kDApCX,aAAe,IAAD,8BACV,gBAOJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEtB,YAAaqB,EAAME,OAAOC,SAP1C,EAAKX,MAAQ,CACTrB,OAAQ,GACRQ,YAAa,IAJP,E,gEAYO,IAAD,OAChByB,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKP,SAAS,CAAE9B,OAASqC,S,+BAGtC,IAAD,EAC2BZ,KAAKJ,MAA7BrB,EADH,EACGA,OAAQQ,EADX,EACWA,YACV8B,EAAiBtC,EAAOuC,QAAO,SAAApC,GAAK,OAAIA,EAAMZ,KAAKiD,cAAcC,SAASjC,EAAYgC,kBAC5F,OAASxC,EAAOJ,OAER,6BACI,wBAAID,UAAU,MAAd,iBACA,kBAAC,EAAD,CAAWc,aAAcgB,KAAKG,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU5B,OAAQsC,OAPZ,2C,GAtBhBZ,aCIEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLlB,QAAQkB,MAAMA,EAAMmC,a","file":"static/js/main.98f16395.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst Card = ({ id, name, username, email }) => {\r\n    let colors = ['bg-light-pink', 'bg-light-blue', 'bg-light-green', 'bg-light-yellow', 'bg-light-black',\r\n        'bg-light-red', 'bg-dark-pink', 'bg-dark-blue', 'bg-dark-green', 'bg-dark-yellow']\r\n    return (\r\n        <div className={`tc ${colors[id % colors.length]} dib br3 pa3 ma2 grow bw2 shadow-5`}>\r\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\" />\r\n            <div>\r\n                <h2>{name} </h2>\r\n                <p> {email} </p>\r\n                <p> {username} </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div>\r\n            {robots !== undefined ? robots.map(robot =>\r\n                <Card\r\n                    key={robot.id}\r\n                    id={robot.id}\r\n                    name={robot.name}\r\n                    email={robot.email}\r\n                    username={robot.username} />\r\n            ) : console.log(\"error\")}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return (\r\n        <div className=\"tc pa2\">\r\n           Search <input \r\n           type=\"search\" \r\n           placeholder='Search robots' \r\n           className=\"pa3 ba b--pink bg-lightest-blue\"\r\n           onChange={searchChange}\r\n           />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n        \r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.state({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        return this.state.hasError ? <h1>Oooops. Something went wrong!</h1> : this.props.children \r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\n//import { robots } from './robots';\r\n// import 'tachyons';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [], \r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value });\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({ robots : users }));\r\n    }\r\n\r\n    render() {\r\n        const { robots, searchfield } = this.state;\r\n        const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchfield.toLowerCase()));\r\n        return (!robots.length) ? <h1>Loading</h1> : \r\n            (\r\n                <div>\r\n                    <h1 className=\"tc\"> RoboFriends </h1>\r\n                    <SearchBox searchChange={this.onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}